{"dependencies":[{"name":"/Users/du/Documents/code/grace/package.json","includedInParent":true,"mtime":1520992428037},{"name":"./util.js","loc":{"line":1,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n//功能：数据绑定，实现赋值更新\n\n\nexports.default = function (context) {\n  var cache = false;\n  var changed = false;\n  var $data; //代理数据\n  //使用ES5 getter/setter，捕获数据变动，注意由于getter/setter不能捕获创建新属性的行为，\n  //所有需要追踪的数据都应该在 Page.data中显式声明。ES6版本的实现则不受此限制，可以动态添加属性。\n  function proxy(ob, attr, value) {\n    Object.defineProperty(ob, attr, {\n      set: function set(v) {\n        if ((typeof v === \"undefined\" ? \"undefined\" : _typeof(v)) == \"object\") {\n          //代理新对象\n          proxy(ob, attr, deepProxy(v));\n        } else {\n          value = v;\n        }\n        if (!cache) {\n          //触发数据更新\n          context.setData($data, null, null, true);\n        } else {\n          changed = true;\n        }\n      },\n      get: function get() {\n        return value;\n      },\n\n      enumerable: true,\n      configurable: true\n    });\n  }\n\n  //代理某个元素\n  function proxyElement(e) {\n    if ((0, _util.type)(e) === 'object') {\n      e = deepProxy(e);\n    } else if ((0, _util.type)(e) === 'array') {\n      e = proxyArray(e);\n    }\n    return e;\n  }\n\n  //递归代理数组\n  function proxyArray(a) {\n    var n = [];\n    for (var index = 0; index < a.length; ++index) {\n      var d = a[index];\n      d = proxyElement(d);\n      n[index] = d;\n    }\n    //重写更易性方法\n    [\"push\", \"pop\", \"shift\", \"unshift\", \"splice\", \"sort\", \"reverse\"].forEach(function (e) {\n      var origin = n[e];\n      n[e] = function () {\n        var r = origin.apply(this, [].slice.call(arguments));\n        changed = true;\n        if (!cache) {\n          $data.$commit();\n        }\n        return r;\n      };\n    });\n    return n;\n  }\n\n  //递归代理对象所有子属性，注意代理顺序应该是从子到父逐层向上\n  function deepProxy(data) {\n    var t = {};\n    for (var attr in data) {\n      var d = data[attr];\n      d = proxyElement(d);\n      proxy(t, attr, d);\n    }\n    return t;\n  }\n  $data = deepProxy(context.data);\n\n  //监听context.$data赋值操作\n  Object.defineProperty(context, \"$data\", {\n    set: function set(v) {\n      $data.$cache();\n      for (var key in v) {\n        $data[key] = v[key];\n      }\n      $data.$commit();\n    },\n    get: function get() {\n      return $data;\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n\n  $data.$set = function (target, key, value) {\n    if ((0, _util.type)(target) == \"array\") {\n      value = proxyElement(value);\n      target[key] = value;\n      changed = true;\n      if (!cache) {\n        $data.$commit();\n      }\n    } else if ((0, _util.type)(target) == \"object\") {\n      proxy(target, key, value);\n    }\n  };\n\n  //开始缓存数据变化\n  $data.$cache = function () {\n    cache = true;\n  };\n  //提交所有缓存的数据变化\n  $data.$commit = function () {\n    cache = false;\n    if (changed && !$data.$hide) {\n      changed = false;\n      context.setData($data, null, null, true);\n    }\n  };\n};\n\nvar _util = require(\"./util.js\");"},"hash":"8b346ccb02f86e451d5c92232bb1bec8","cacheData":{"env":{}}}